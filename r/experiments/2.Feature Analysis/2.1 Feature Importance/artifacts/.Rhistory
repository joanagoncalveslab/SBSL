source(paste0(project_dir, "r/utils/train-model.R"))
cancers <- train.get_cancer_types()
train_dataset <- "combined_train"
# split dataset
train <- train.balance_cancers(train.get_dataset(train_dataset, cancers))
feature_cor <- corr(train[5:ncol(train)])
feature_cor <- cor(train[5:ncol(train)])
dim(feature_cor)
View(feature_cor)
feature_cor <- round(cor(train[5:ncol(train)]), 2)
melted_cormat <- melt(feature_cor)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
library(reshape2)
feature_cor <- round(cor(train[5:ncol(train)]), 2)
melted_cormat <- melt(feature_cor)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
cormat <- round(cor(train[5:ncol(train)]), 2)
library(ggplot2)
library(reshape2)
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
upper_tri <- get_upper_tri(cormat)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
cormat > .7
which(cormat > .75, arr.ind = T)
which(abs(cormat) > .75, arr.ind = T)
highly_cor <- which(abs(cormat) > .75, arr.ind = T)
highly_cor[["row"]]
highly_cor["row"]
highly_cor[1,2]
highly_cor[1,]
highly_cor[1,"row"]
apply(highly_cor, 1, function(x) print(x[1]))
apply(highly_cor, 1, function(x) x[1] != x[2])
highly_cor[apply(highly_cor, 1, function(x) x[1] != x[2]), ]
highly_cor <- which(abs(cormat) > .7, arr.ind = T)
highly_cor[apply(highly_cor, 1, function(x) x[1] != x[2]), ]
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 8, hjust = 1))+
coord_fixed()
90
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90,size = 10))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 10))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 90,
size = 10, hjust = 1))+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_blank())+
coord_fixed()
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_blank(), axis.title.y=element_blank(), axis.title.x=element_blank()) +
coord_fixed()
highly_cor[apply(highly_cor, 1, function(x) x[1] != x[2]), ]
train.get_excluded_features <- function() c("MUTEX", "discoversl_mutex", "CRIPSR_avg", "CRISPR_dep_stat")
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.1 Base Datasets/artifacts/")
setwd(working_dir)
start_time <- Sys.time()
source(paste0(project_dir, "r/utils/train-model.R"))
source(paste0(project_dir, "r/utils/logging.R"))
source(paste0(project_dir, "r/experiments/baseline/pca-gCMF.R"))
source(paste0(project_dir, "r/experiments/baseline/daisy.R"))
source(paste0(project_dir, "r/experiments/baseline/discoversl.R"))
# load parrallel processing
library(doParallel)
library(foreach)
cl <- makePSOCKcluster(detectCores())
registerDoParallel(cl)
cancers <- train.get_cancer_types()
train_dataset <- "combined_train"
test_dataset <- "combined_test"
do.call(file.remove, list(list.files(working_dir, full.names = TRUE)))
# split dataset
train <- train.balance_cancers(train.get_dataset(train_dataset, cancers))
test <- train.balance_cancers(train.get_dataset(test_dataset, cancers))
# Dataset Makeup
log.dataset_makeup(train, filename = train_dataset)
log.dataset_makeup(test, filename = test_dataset)
# get predictors, remove MUTEX because it is a useless feature
vars <- colnames(train)[5:ncol(train)]
vars <- vars[-which(vars %in% train.get_excluded_features())]
f <- as.formula(paste("as.factor(SL) ~", paste(vars, collapse = " + ")))
# train and save models
models <- list()
models[["Logistic Regression"]] <- train.logr(train, f)
# models[["Random Forest"]] <- train.rf(train, f)
# get results for each model
results <- list()
results[["Logistic Regression"]] <- train.analyse(models[["Logistic Regression"]], test)
# results[["Random Forest"]] <- train.analyse(models[["Random Forest"]], test)
results[["DAISY"]] <- DAISY.get_results(test)
results[["DiscoverSL"]] <- discoverSL.get_results(test)
saveRDS(results, file=paste0(test_dataset, "-results.rda"))
log.metrics(results, filename = test_dataset)
log.curves(results, filename = test_dataset, title = paste0("All Cancers"))
log.summary(models, filename = train_dataset)
stopCluster(cl)
log.experiment_run()
registerDoSEQ()
end_time <- Sys.time()
print(end_time - start_time)
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.1 Base Datasets/artifacts/")
setwd(working_dir)
start_time <- Sys.time()
source(paste0(project_dir, "r/utils/train-model.R"))
source(paste0(project_dir, "r/utils/logging.R"))
source(paste0(project_dir, "r/experiments/baseline/pca-gCMF.R"))
source(paste0(project_dir, "r/experiments/baseline/daisy.R"))
source(paste0(project_dir, "r/experiments/baseline/discoversl.R"))
# load parrallel processing
library(doParallel)
library(foreach)
cl <- makePSOCKcluster(detectCores())
registerDoParallel(cl)
cancers <- train.get_cancer_types()
train_dataset <- "combined_train"
test_dataset <- "combined_test"
do.call(file.remove, list(list.files(working_dir, full.names = TRUE)))
# split dataset
train <- train.balance_cancers(train.get_dataset(train_dataset, cancers))
test <- train.balance_cancers(train.get_dataset(test_dataset, cancers))
# Dataset Makeup
log.dataset_makeup(train, filename = train_dataset)
log.dataset_makeup(test, filename = test_dataset)
# get predictors, remove MUTEX because it is a useless feature
vars <- colnames(train)[5:ncol(train)]
vars <- vars[-which(vars %in% train.get_excluded_features())]
f <- as.formula(paste("as.factor(SL) ~", paste(vars, collapse = " + ")))
# train and save models
models <- list()
models[["Logistic Regression"]] <- train.logr(train, f)
models[["Random Forest"]] <- train.rf(train, f)
# get results for each model
results <- list()
results[["Logistic Regression"]] <- train.analyse(models[["Logistic Regression"]], test)
results[["Random Forest"]] <- train.analyse(models[["Random Forest"]], test)
results[["DAISY"]] <- DAISY.get_results(test)
results[["DiscoverSL"]] <- discoverSL.get_results(test)
saveRDS(results, file=paste0(test_dataset, "-results.rda"))
log.metrics(results, filename = test_dataset)
log.curves(results, filename = test_dataset, title = paste0("All Cancers"))
log.summary(models, filename = train_dataset)
stopCluster(cl)
log.experiment_run()
registerDoSEQ()
end_time <- Sys.time()
print(end_time - start_time)
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/2.Feature Analysis/2.1 Feature Importance/artifacts/")
models_dir <- paste0(project_dir, "r/experiments/1.Performance/1.2 Per Cancer/artifacts/")
setwd(working_dir)
source(paste0(project_dir, "r/utils/train-model.R"))
library(caret)
library(ggplot2)
library(ggpubr)
library(ggrepel)
# Feature colors
cols <- c("#ac4a51",
"#60c352",
"#795bd0",
"#589831",
"#c943a9",
"#acb742",
"#cd74de",
"#3c9754",
"#d9407f",
"#6dc38b",
"#d13a40",
"#3fc1bf",
"#d86632",
"#5b83e2",
"#d59d35",
"#8950a2",
"#617e33",
"#b296db",
"#837a33",
"#5667a8",
"#d3a26c",
"#53a2d5",
"#9a5c2a",
"#37825e",
"#ad5b94",
"#e18079",
"#964267",
"#e386b3")
# Bar Chart Plot
plot_varImp_bar_chart <- function (data) {
# Graph
ggplot(data, aes(fill=variables, y=value, x=reorder(variables, value))) +
geom_bar(position="dodge", stat="identity") +
facet_wrap(~models, nrow = 1, ncol = 2) +
xlab("") +
scale_y_discrete(limits = rev(levels(variables))) +
scale_fill_manual(values=cols) +
coord_flip() +
theme(
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
legend.position = "none")
}
# Datasets
cancers <- train.get_cancer_types()
train_dataset <- "combined_train"
test_dataset <- "combined_test"
do.call(file.remove, list(list.files(working_dir, full.names = TRUE)))
# split dataset
train <- train.balance_cancers(train.get_dataset(train_dataset, cancers))
test <- train.balance_cancers(train.get_dataset(test_dataset, cancers))
vars <- colnames(train)[5:ncol(train)]
vars <- vars[-which(vars %in% train.get_excluded_features())]
f <- as.formula(paste("as.factor(SL) ~", paste(vars, collapse = " + ")))
models <- list()
for (i in 1:10) {
models[[i]] <- train.logr(train, f)
plot(varImp(models[[i]]))
}
plot(varImp(models[[1]]))
plot(varImp(models[[2]]))
plot(varImp(models[[3]]))
plot(varImp(models[[4]]))
varImp(models[[4]])
varImp(models[[4]])$importance
hist(train[, 5])
for (v in var) {
hist(train[[v]])
}
for (v in vars) {
hist(train[[v]])
}
for (v in vars) {
qplot(train[[v]], geom="histogram")
}
for (v in vars) {
ggplot(data=train, aes(train[[v]])) +
geom_histogram()
}
v
ggplot(data=train, aes(train[[v]])) +
geom_histogram()
for (v in vars) {
ggplot(data=train, aes(train[[v]])) +
geom_histogram() + ggtitle(v)
}
ggplot(data=train, aes(train[[v]])) +
geom_histogram() + ggtitle(v)
for (v in vars) {
p <- ggplot(data=train, aes(train[[v]])) +
geom_histogram() + ggtitle(v)
plot(p)
}
variances <- var(train[5:ncol(train)])
variances
dim(variances)
variances <- diag(variances)
variances
round(variances, 2)
round(variances, 2)
mode(train$diff_exp_logFC)
train$diff_exp_logFC
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(train$diff_exp_logFC)
table(unique(train$diff_exp_logFC))
getmode(train$diff_exp_logFC)
sum(train$diff_exp_logFC == 1)
sum(train$diff_exp_logFC == 0)
train[train$diff_exp_logFC == 1,  ]
train[train$diff_exp_logFC == 1,  4]
train[train$diff_exp_logFC == 1,  3]
any(train[train$diff_exp_logFC == 1,  3] == "COAD")
setwd("~")
setwd("~")
source("~/repos/msc-thesis-project/r/experiments/generate_features.R")
source("~/repos/msc-thesis-project/r/utils/train-model.R")
d <- datasets[1]
datasets <- c("isle", "discoversl")
d <- datasets[1]
pairs <- train.get_dataset(d, cancers)
cancers <- c("BRCA", "LUAD", "OV")
pairs <- train.get_dataset(d, cancers)
colnames(pairs)
pairs <- pairs[-c("diff_exp_logFC", "diff_exp_pvalue")]
colnames(pairs[!which(colnames(pairs) %in% c("diff_exp_logFC", "diff_exp_pvalue"))])
which(colnames(pairs) %in% c("diff_exp_logFC", "diff_exp_pvalue"))
pairs <- pairs[-which(colnames(pairs) %in% c("diff_exp_logFC", "diff_exp_pvalue"))]
colnames(pairs)
gene1s <- unique(unlist(pairs$gene1))
456/8
57 * 10
570/60
546/24
22.75*10
227.5/60
pairs <- train.get_dataset(d, cancers)
pairs <- pairs[pairs$diff_exp_logFC == 1, ]
pairs
d <- "discoversl"
pairs <- train.get_dataset(d, cancers)
pairs <- pairs[pairs$diff_exp_logFC == 1, ]
pairs <- pairs[pairs$diff_exp_logFC == 1, ]
pairs
unique(pairs$cancer_type)
pairs <- train.get_dataset(d, cancers)
pairs <- pairs[pairs$diff_exp_logFC == 1, ]
gene1s <- unique(unlist(pairs$gene1))
d <- "isle"
pairs <- train.get_dataset(d, cancers)
pairs <- pairs[pairs$diff_exp_logFC == 1, ]
gene1s <- unique(unlist(pairs$gene1))
d <- readRDS("~/repos/msc-thesis-project/r/data/discoversl_repair_diff_exp.Rdata")
d$diff_exp_logFC
d1 <- d
d2 <- readRDS("~/repos/msc-thesis-project/r/data/isle_repair_diff_exp.Rdata")
d2
isle <- readRDS("~/repos/msc-thesis-project/r/data/isle.Rdata")
isle <- readRDS("~/repos/msc-thesis-project/r/data/isle.RData")
discoversl <- readRDS("~/repos/msc-thesis-project/r/data/discoversl.RData")
nrow(isle[isle$diff_exp_logFC == 1,])
tmp <- isle[isle$diff_exp_logFC == 1,]
tmp$cancer_type
sum(tmp$cancer_type %in% c("OV", "BRCA", "LUAD"))
d1
d <- "isle"
setwd("~")
source("~/repos/msc-thesis-project/r/experiments/generate_features.R")
source("~/repos/msc-thesis-project/r/utils/train-model.R")
datasets <- c("isle", "discoversl")
cancers <- c("BRCA", "LUAD", "OV")
d <- datasets[1]
pairs <- train.get_dataset(d, cancers)
pairs <- pairs[pairs$diff_exp_logFC == 1, ]
pairs <- pairs[-which(colnames(pairs) %in% c("diff_exp_logFC", "diff_exp_pvalue"))]
gene1s <- unique(unlist(pairs$gene1))
d
g <- gene1s[g]
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/2.Feature Analysis/2.1 Feature Importance/artifacts/")
setwd(working_dir)
source(paste0(project_dir, "r/utils/train-model.R"))
cancers <- train.get_cancer_types()
train_dataset <- "combined_train"
# split dataset
train <- train.balance_cancers(train.get_dataset(train_dataset, cancers))
cormat <- round(cor(train[5:ncol(train)]), 2)
library(ggplot2)
library(reshape2)
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Melt the correlation matrix
upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_blank(), axis.title.y=element_blank(), axis.title.x=element_blank()) +
coord_fixed()
ggsave("correlation_heatmap.png", width = 8, height = 8, device = "png")
>CMF
?CMF
library(CMF)
?CMF
?predictCMF
?CMF
