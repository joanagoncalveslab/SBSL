X <- data.matrix(train)
y <- ifelse(labels == "Y", 1, -1)
cvfit <- L0Learn.cvfit(X, y,
nFolds=10,
loss="Logistic",
nGamma = 20,
nLambda = 100,
penalty="L0L2")
cvMeans <- unlist(lapply(cvfit$cvMeans, min))
optimalGammaIndex = which.min(cvMeans)
optimalLambdaIndex = which.min(cvfit$cvMeans[[optimalGammaIndex]])
cvfit$optimalLambda = cvfit$fit$lambda[[optimalGammaIndex]][optimalLambdaIndex]
cvfit$optimalGamma = cvfit$fit$gamma[optimalGammaIndex]
cvfit
}
"This function creates a random forest model using the supplied formula and 10-fold cross validation"
train.rf <- function(train, f){
train.control <- trainControl(
method="repeatedcv",
number=10,
repeats=5,
classProbs=TRUE,
summaryFunction=twoClassSummary,
verboseIter = TRUE
)
train.grid <- expand.grid(mtry = (3:12))
m <- caret::train(f
, data = train
, method = "rf"
, tuneLength = 10
, metric = train.get_metric()
, trControl = train.control
, tuneGrid = train.grid)
return(m)
}
train.MUVR <- function(train) {
library(MUVR)
nRep = 5
nOuter = 10
varRatio=0.8
method="RF"
m <- MUVR(X=train[5:ncol(train)],
Y=train$SL,
nRep = nRep,
nOuter=nOuter,
varRatio = varRatio,
method = method)
m
}
"This function creates a random forest model using the supplied formula and 10-fold cross validation"
train.gbm <- function(train, f){
# set up 10 fold cross validation
train.control <- trainControl(method = "cv", number = 10, repeats = 5,verbose = FALSE, search = "random", classProbs = TRUE, summary=twoClassSummary)
m <- train(f
, data = train
, method = "gbm"
, tuneLength = 10
, metric = train.get_metric()
, trControl = train.control)
return(m)
}
plot_prc_and_roc <- function(predicitons, test, posClass, negClass) {
class0.scores <- predicitons
class0.labels <- test$SL == posClass
roc <- roc.curve(scores.class0 = class1.scores, weights.class0 = class0.labels, curve = T)
prc <- pr.curve(scores.class0 = class1.scores, weights.class0 = class0.labels, curve = T)
return(list(roc, prc))
}
train.analyse <- function(pred, sdev, test, posLabel = "Y", negLabel = "N") {
curves <- plot_prc_and_roc(pred, test, posLabel, negLabel)
roc <- curves[[1]]
prc <- curves[[2]]
predictions <- data.frame(pred, sdev)
list(roc = roc, prc = prc, predictions=predictions, test=test$SL)
}
train.get_dataset("balanced")
d <- train.get_dataset("combined")
table(d$SL, d$cancer_type)
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.7 Cross Cancer/artifacts/images")
setwd(working_dir)
library(pROC)
library(reshape2)
library(ggplot2)
get_xcomparison_for_model <- function(model_name) {
xcomparison_results <- list()
for (train_cancer in cancers) {
xcomparison <- readRDS(paste0("../", train_cancer, "_cross_comparison_run_data.Rdata"))
mean_auc <- c()
sd_auc <- c()
for (test_cancer in cancers) {
aucs <- c()
for (i in 1:10) {
labels <- xcomparison$labels[[test_cancer]][[i]]
preds <- xcomparison$preds[[test_cancer]][[model_name]][[i]]
aucs <- c(pROC::auc(pROC::roc(labels, preds, direction = "<")), aucs)
}
mean_auc <- c(mean_auc, mean(aucs))
sd_auc <- c(sd_auc, sd(aucs))
}
xcomparison_results[[paste0(train_cancer, "mean")]] <- mean_auc
xcomparison_results[[paste0(train_cancer, "sd")]] <- sd_auc
}
xcomparison_results
}
get_LOCO_results_for_model <- function(model) {
results <- c()
for (test_cancer in cancers) {
data <- readRDS(paste0("../", test_cancer, "_LOCO_run_data.Rdata"))
aucs <- c()
for (i in 1:10) {
labels <- data$labels[[i]]
preds <- data$preds[[model]][[i]]
aucs <- c(pROC::auc(pROC::roc(labels, preds, direction = "<")), aucs)
}
results[[paste0(test_cancer, "mean")]] <- mean(aucs)
results[[paste0(test_cancer, "sd")]] <- sd(aucs)
}
results
}
plot_xcomparison_heatmap <- function(x) {
melted_cormat <- melt(round(data.matrix(x), 2))
colnames(melted_cormat)[1:2] <- c("Tested_on", "Trained_on")
ggplot(data = melted_cormat, aes(Tested_on, Trained_on, fill = value))+
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-0.25,0.25), space = "Lab",
name="RF - LR (AUC)") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggsave("cancer-cross-comparison.png", width = 6, height = 4)
}
plot_xcomparison_heatmap_2 <- function(x, color, name) {
melted_cormat <- melt(round(data.matrix(x), 2))
colnames(melted_cormat)[1:2] <- c("Tested_on", "Trained_on")
ggplot(data = melted_cormat, aes(Tested_on, Trained_on, fill = value))+
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "white", high = color, space = "Lab", limit = c(0,1),
name="AUC") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggsave(paste0(name, "-cancer-cross-comparison.png"), width = 6, height = 4)
}
plot_LOCO_heatmap <- function(x_loo) {
melted_cormat_loo <- melt(round(x_loo, 2))
ggplot(data = melted_cormat_loo, aes(cancers, 1, fill = value))+
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-0.25,0.25), space = "Lab",
name="RF - LR (ROC)") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_blank())+
coord_fixed()
ggsave("leave-one-cancer-out.png", width = 6, height = 3)
}
plot_LOCO_heatmap_2 <- function(x_loo, color, name) {
melted_cormat_loo <- melt(round(x_loo, 2))
ggplot(data = melted_cormat_loo, aes(cancers, 1, fill = value))+
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "white", high = color, space = "Lab", limit = c(0,1),
name="AUC") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_blank())+
coord_fixed()
ggsave("leave-one-cancer-out.png", width = 6, height = 3)
}
cancers <- c("BRCA", "COAD", "LUAD", "OV")
logr_loo <- get_LOCO_results_for_model("Elastic Net")
logr_loo <- logr_loo[c(1,3,5,7)]
rf_loo <- get_LOCO_results_for_model("MUVR")
rf_loo <- rf_loo[c(1,3,5,7)]
x_loo <- rf_loo-logr_loo
plot_LOCO_heatmap_2(rf_loo, "red", "randomforest")
plot_LOCO_heatmap_2(logr_loo, "blue", "logisticregression")
logr_loo <- get_LOCO_results_for_model("Elastic Net")
logr_loo <- logr_loo[c(1,3,5,7)]
rf_loo <- get_LOCO_results_for_model("MUVR")
rf_loo <- rf_loo[c(1,3,5,7)]
x_loo <- rf_loo-logr_loo
names(x_loo) <- cancers
plot_LOCO_heatmap(x_loo)
plot_LOCO_heatmap_2(rf_loo, "red", "randomforest")
plot_LOCO_heatmap_2(logr_loo, "blue", "logisticregression")
plot_LOCO_heatmap_2 <- function(x_loo, color, name) {
melted_cormat_loo <- melt(round(x_loo, 2))
ggplot(data = melted_cormat_loo, aes(cancers, 1, fill = value))+
geom_tile(color = "white") +
geom_text(aes(label=value)) +
scale_fill_gradient2(low = "white", high = color, space = "Lab", limit = c(0,1),
name="AUC") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1),
axis.text.y = element_blank(),
axis.title.y = element_blank())+
coord_fixed()
ggsave(paste0(name, "leave-one-cancer-out.png"), width = 6, height = 3)
}
logr_loo <- get_LOCO_results_for_model("Elastic Net")
logr_loo <- logr_loo[c(1,3,5,7)]
rf_loo <- get_LOCO_results_for_model("MUVR")
rf_loo <- rf_loo[c(1,3,5,7)]
x_loo <- rf_loo-logr_loo
names(x_loo) <- cancers
plot_LOCO_heatmap(x_loo)
plot_LOCO_heatmap_2(rf_loo, "red", "randomforest")
plot_LOCO_heatmap_2(logr_loo, "blue", "logisticregression")
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.2 Per Cancer/artifacts/")
setwd(working_dir)
source(paste0(project_dir, "r/utils/logging.R"))
source(paste0(project_dir, "r/utils/train-model.R"))
library(caret)
library(pROC)
library(foreach)
cancers <- c("BRCA", "LUAD", "COAD", "OV")
for (cancer in cancers) {
d <- train.balance_cancers(train.get_dataset("combined", cancer))
train_index <- createDataPartition(d$SL, p = .8,
list = FALSE,
times = 1)
train <- d[train_index, ]
test <- d[-train_index, ]
preProcValues <- caret::preProcess(train[5:ncol(train)], method = c("center", "scale", "nzv"))
train <- cbind(train[1:4], predict(preProcValues, train[5:ncol(train)]))
test <- cbind(test[1:4], predict(preProcValues, test[5:ncol(test)]))
f <- train.get_formula(train)
models <- list()
models[["L0L2"]] <- train.l0l2(train[5:ncol(train)], train$SL)
models[["Elastic Net"]] <- train.logr(train, f)
models$MUVR <- train.MUVR(train)
log.plot_var_importance_and_ale_plots(models, test, cancer)
}
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.5 Embeddings/artifacts/")
setwd(working_dir)
source(paste0(project_dir, "r/utils/train-model.R"))
source(paste0(project_dir, "r/utils/analyse-model.R"))
source(paste0(project_dir, "r/utils/monitoring.R"))
source(paste0(project_dir, "r/utils/logging.R"))
source(paste0(project_dir, "r/utils/load-raw.R"))
source("../autoencoder.R")
library(ggplot2)
library(caret)
library(doParallel)
library(foreach)
library(pROC)
load_dependency_scores <- function(cancers) {
dep_scores <- raw.get_ccle_rnai_dependency_scores(cancers)
dep_scores$gene <- row.names(dep_scores)
dep_scores <- na.omit(dep_scores)
row.names(dep_scores) <- dep_scores$gene
dep_scores$gene <- NULL
dep_scores
}
encode_data <- function(d, encoder, scores) {
d <- d[, 1:4]
gene1.dep_scores <- scores[d$gene1, ]
gene1.dep_scores_na_i <- unique(which(is.na(gene1.dep_scores), arr.ind = T)[,1])
gene2.dep_scores <- scores[d$gene2, ]
gene2.dep_scores_na_i <- unique(which(is.na(gene2.dep_scores), arr.ind = T)[,1])
na_i <- c(gene1.dep_scores_na_i, gene2.dep_scores_na_i)
d <- d[-na_i, ]
gene1.dep_scores <- gene1.dep_scores[-na_i, ]
gene2.dep_scores <- gene2.dep_scores[-na_i, ]
gene1.encoded <- encoder %>% predict(data.matrix(gene1.dep_scores))
gene2.encoded <- encoder %>% predict(data.matrix(gene2.dep_scores))
d <- dplyr::bind_cols(list(d, as.data.frame(gene1.encoded), as.data.frame(gene2.encoded)))
d
}
use_raw_features <- function(d, dep_scores) {
d <- d[, 1:4]
gene1.dep_scores <- dep_scores[d$gene1, ]
gene1.dep_scores_na_i <- unique(which(is.na(gene1.dep_scores), arr.ind = T)[,1])
gene2.dep_scores <- dep_scores[d$gene2, ]
gene2.dep_scores_na_i <- unique(which(is.na(gene2.dep_scores), arr.ind = T)[,1])
na_i <- c(gene1.dep_scores_na_i, gene2.dep_scores_na_i)
d <- d[-na_i, ]
gene1.dep_scores <- gene1.dep_scores[-na_i, ]
gene2.dep_scores <- gene2.dep_scores[-na_i, ]
d1 <- dplyr::bind_cols(list(data.frame(SL = d$SL), as.data.frame(gene1.dep_scores), as.data.frame(gene2.dep_scores)))
d2 <- dplyr::bind_cols(list(data.frame(SL = d$SL), as.data.frame(gene2.dep_scores), as.data.frame(gene1.dep_scores)))
dplyr::bind_rows(list(d1, d2))
}
train_on_embedding_with_n_features <- function(dep_scores, train, test, n) {
# train autoencoder
n <- floor(nrow(dep_scores) * .8)
X.train <- data.matrix(dep_scores[1:n, -ncol(dep_scores)])
X.test <- data.matrix(dep_scores[n:nrow(dep_scores), -ncol(dep_scores)])
encoder <- autoencode(X.train, X.test, 20)
test <- encode_data(test, encoder, dep_scores[-ncol(dep_scores)])
train <- encode_data(train, encoder, dep_scores[-ncol(dep_scores)])
logr.m <- train.logr(train[4:ncol(train)], as.factor(SL) ~ .)
}
args <- commandArgs(trailingOnly=TRUE)
print(monitor.system_details())
print(monitor.report_available_workers())
cancer <- args[1]
nCores <- min(detectCores(), 4)
V <- 10
if (Sys.info()["nodename"] == "colm-Inspiron-5577") {
V <- 10
cancer <- "BRCA"
}
for (cancer in c("BRCA", "LUAD", "OV", "COAD")) {
scores <- load_dependency_scores(cancer)
labels <- preds <- models <- list()
for (i in 1:V) {
data <- train.balance_cancers(train.get_dataset("combined", cancer))
train_index <- createDataPartition(data$SL, p = .8,
list = FALSE,
times = 1)
train <- data[train_index, ]
test <- data[-train_index, ]
train <- use_raw_features(train, scores)
test <- use_raw_features(test, scores)
# data should be centered and scaled for use in L0L2 algorithm
preProcValues <- caret::preProcess(train[2:ncol(train)], method = c("center", "scale"))
train <- cbind(SL = train$SL, predict(preProcValues, train[2:ncol(train)]))
test <- cbind(test$SL, predict(preProcValues, test[2:ncol(test)]))
colnames(train)[1] <- colnames(test)[1] <- "SL"
# generalised linear model fit (for VIF measurements)
glm.fit <- glm(SL ~ ., data = train, family = "binomial")
glm.results <- predict(glm.fit, test)
# L0 L2 penalised logisic regression models
# l0l2.cvfit <- L0Learn.cvfit(data.matrix(train[2:ncol(train)]), train$SL,
#                             nFolds=10,
#                             loss="Logistic",
#                             nGamma = 5,
#                             penalty="L0L2")
# cvMeans <- unlist(lapply(l0l2.cvfit$cvMeans, min))
# optimalGammaIndex = which.min(cvMeans)
# optimalLambdaIndex = which.min(l0l2.cvfit$cvMeans[[optimalGammaIndex]])
# l0l2.cvfit$optimalLambda = l0l2.cvfit$fit$lambda[[optimalGammaIndex]][optimalLambdaIndex]
# l0l2.cvfit$optimalGamma = l0l2.cvfit$fit$gamma[optimalGammaIndex]
# l0l2.results <- as.numeric(predict(l0l2.cvfit,
#                                    newx=data.matrix(test[2:ncol(test)]),
#                                    lambda=l0l2.cvfit$optimalLambda,
#                                    gamma=l0l2.cvfit$optimalGamma))
labels[[i]] <- test$SL
models[["glm"]][[i]] <- glm.fit
# models[["L0L2"]][[i]] <- l0l2.cvfit
preds[["glm"]][[i]] <- glm.results
# preds[["L0L2"]][[i]] <- l0l2.results
print(monitor.get_average_cpu_usage())
}
run_data <- list()
run_data$preds <- preds
run_data$models <- models
run_data$labels <- labels
saveRDS(run_data, paste0(cancer, "_raw_features_run_data.Rdata"))
}
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.5 Embeddings/artifacts/images")
setwd(working_dir)
source(paste0(project_dir, "r/utils/logging.R"))
for (cancer in c("BRCA", "LUAD", "OV", "COAD")) {
data <- readRDS(paste0("../", cancer, "_raw_features_run_data.Rdata"))
title <- cancer
filename <- cancer
V <- 10
range01 <- function(x){(x-(min(x)-1))/((max(x)+1)-(min(x)-1))}
data$preds$`glm` <- lapply(data$preds$`glm`, range01)
log.average_roc_curve_comparisons(data$preds, lapply(data$labels, function(x) x == "Y"),
filename = filename,
title = title)
}
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.5 Embeddings/artifacts/")
setwd(working_dir)
source(paste0(project_dir, "r/utils/train-model.R"))
source(paste0(project_dir, "r/utils/analyse-model.R"))
source(paste0(project_dir, "r/utils/monitoring.R"))
source(paste0(project_dir, "r/utils/logging.R"))
source(paste0(project_dir, "r/utils/load-raw.R"))
source("../autoencoder.R")
library(ggplot2)
library(caret)
library(doParallel)
library(foreach)
library(pROC)
load_dependency_scores <- function(cancers) {
dep_scores <- raw.get_ccle_rnai_dependency_scores(cancers)
dep_scores$gene <- row.names(dep_scores)
dep_scores <- na.omit(dep_scores)
row.names(dep_scores) <- dep_scores$gene
dep_scores$gene <- NULL
dep_scores
}
encode_data <- function(d, encoder, scores) {
d <- d[, 1:4]
gene1.dep_scores <- scores[d$gene1, ]
gene1.dep_scores_na_i <- unique(which(is.na(gene1.dep_scores), arr.ind = T)[,1])
gene2.dep_scores <- scores[d$gene2, ]
gene2.dep_scores_na_i <- unique(which(is.na(gene2.dep_scores), arr.ind = T)[,1])
na_i <- c(gene1.dep_scores_na_i, gene2.dep_scores_na_i)
d <- d[-na_i, ]
gene1.dep_scores <- gene1.dep_scores[-na_i, ]
gene2.dep_scores <- gene2.dep_scores[-na_i, ]
gene1.encoded <- encoder %>% predict(data.matrix(gene1.dep_scores))
gene2.encoded <- encoder %>% predict(data.matrix(gene2.dep_scores))
d <- dplyr::bind_cols(list(d, as.data.frame(gene1.encoded), as.data.frame(gene2.encoded)))
d
}
use_raw_features <- function(d, dep_scores) {
d <- d[, 1:4]
gene1.dep_scores <- dep_scores[d$gene1, ]
gene1.dep_scores_na_i <- unique(which(is.na(gene1.dep_scores), arr.ind = T)[,1])
gene2.dep_scores <- dep_scores[d$gene2, ]
gene2.dep_scores_na_i <- unique(which(is.na(gene2.dep_scores), arr.ind = T)[,1])
na_i <- c(gene1.dep_scores_na_i, gene2.dep_scores_na_i)
d <- d[-na_i, ]
gene1.dep_scores <- gene1.dep_scores[-na_i, ]
gene2.dep_scores <- gene2.dep_scores[-na_i, ]
d1 <- dplyr::bind_cols(list(data.frame(SL = d$SL), as.data.frame(gene1.dep_scores), as.data.frame(gene2.dep_scores)))
d2 <- dplyr::bind_cols(list(data.frame(SL = d$SL), as.data.frame(gene2.dep_scores), as.data.frame(gene1.dep_scores)))
dplyr::bind_rows(list(d1, d2))
}
train_on_embedding_with_n_features <- function(dep_scores, train, test, n) {
# train autoencoder
n <- floor(nrow(dep_scores) * .8)
X.train <- data.matrix(dep_scores[1:n, -ncol(dep_scores)])
X.test <- data.matrix(dep_scores[n:nrow(dep_scores), -ncol(dep_scores)])
encoder <- autoencode(X.train, X.test, 20)
test <- encode_data(test, encoder, dep_scores[-ncol(dep_scores)])
train <- encode_data(train, encoder, dep_scores[-ncol(dep_scores)])
logr.m <- train.logr(train[4:ncol(train)], as.factor(SL) ~ .)
}
args <- commandArgs(trailingOnly=TRUE)
print(monitor.system_details())
print(monitor.report_available_workers())
cancer <- args[1]
nCores <- min(detectCores(), 4)
V <- 10
if (Sys.info()["nodename"] == "colm-Inspiron-5577") {
V <- 10
cancer <- "BRCA"
}
for (cancer in c("BRCA", "LUAD", "OV", "COAD")) {
scores <- load_dependency_scores(cancer)
labels <- preds <- models <- list()
for (i in 1:V) {
data <- train.balance_cancers(train.get_dataset("combined", cancer))
train_index <- createDataPartition(data$SL, p = .8,
list = FALSE,
times = 1)
train <- data[train_index, ]
test <- data[-train_index, ]
train <- use_raw_features(train, scores)
test <- use_raw_features(test, scores)
# data should be centered and scaled for use in L0L2 algorithm
preProcValues <- caret::preProcess(train[2:ncol(train)], method = c("center", "scale"))
train <- cbind(SL = train$SL, predict(preProcValues, train[2:ncol(train)]))
test <- cbind(test$SL, predict(preProcValues, test[2:ncol(test)]))
colnames(train)[1] <- colnames(test)[1] <- "SL"
# generalised linear model fit (for VIF measurements)
glm.fit <- glm(SL ~ ., data = train, family = "binomial")
glm.results <- predict(glm.fit, test)
# L0 L2 penalised logisic regression models
l0l2.cvfit <- L0Learn.cvfit(data.matrix(train[2:ncol(train)]), train$SL,
nFolds=10,
loss="Logistic",
nGamma = 5,
penalty="L0L2")
cvMeans <- unlist(lapply(l0l2.cvfit$cvMeans, min))
optimalGammaIndex = which.min(cvMeans)
optimalLambdaIndex = which.min(l0l2.cvfit$cvMeans[[optimalGammaIndex]])
l0l2.cvfit$optimalLambda = l0l2.cvfit$fit$lambda[[optimalGammaIndex]][optimalLambdaIndex]
l0l2.cvfit$optimalGamma = l0l2.cvfit$fit$gamma[optimalGammaIndex]
l0l2.results <- as.numeric(predict(l0l2.cvfit,
newx=data.matrix(test[2:ncol(test)]),
lambda=l0l2.cvfit$optimalLambda,
gamma=l0l2.cvfit$optimalGamma))
labels[[i]] <- test$SL
models[["glm"]][[i]] <- glm.fit
models[["L0L2"]][[i]] <- l0l2.cvfit
preds[["glm"]][[i]] <- glm.results
preds[["L0L2"]][[i]] <- l0l2.results
print(monitor.get_average_cpu_usage())
}
run_data <- list()
run_data$preds <- preds
run_data$models <- models
run_data$labels <- labels
saveRDS(run_data, paste0(cancer, "_raw_features_run_data.Rdata"))
}
project_dir <- "~/repos/msc-thesis-project/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.5 Embeddings/artifacts/images")
setwd(working_dir)
source(paste0(project_dir, "r/utils/logging.R"))
for (cancer in c("BRCA", "LUAD", "OV", "COAD")) {
data <- readRDS(paste0("../", cancer, "_raw_features_run_data.Rdata"))
title <- cancer
filename <- cancer
V <- 10
range01 <- function(x){(x-(min(x)-1))/((max(x)+1)-(min(x)-1))}
data$preds$`glm` <- lapply(data$preds$`glm`, range01)
log.average_roc_curve_comparisons(data$preds, lapply(data$labels, function(x) x == "Y"),
filename = filename,
title = title)
}
