ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
myPredict <- myPredict + 20
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
model$coefficients
x <- runs$size
y <- runs$MaxRSS
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
MaxRSS
runs$MaxRSS
sapply(runs$MaxRSS, function(x) x[1:length(x)-1])
sapply(runs$MaxRSS, function(x) substr(x, 1, length(x)-1)
)
sapply(runs$MaxRSS, function(x) substr(x, 1, length(x)-1)
)
runs$MaxRSS[1]
substr(runs$MaxRSS[1], 1, 4)
sapply(runs$MaxRSS, function(x) substr(x, 1, nchar(x)-1))
sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(3, 0)
abline(3, 5)
abline(3, 1)
abline(3, .2)
?abline
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(3, .2)
?abline
abline(a = 3, b = .2)
abline(a = 3, b = 1)
abline(a = 0, b = 1)
model$coefficients
abline(a = 1, b = 4.016516e-06)
abline(a = 1, b = 5.016516e-06)
abline(a = 1, b = 10.016516e-06)
abline(a = 4, b = 10.016516e-06)
abline(a = 2, b = 10.016516e-06)
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = 2, b = 10.016516e-06)
abline(a = 0, b = 10.016516e-06)
abline(a = 0, b = 8.016516e-06)
abline(a = 0, b = 7.016516e-06)
abline(a = 0, b = 5.016516e-06)
plot(dexp)
plot(dexp(1))
?dexp
dexp(seq(1, 10, .001))
plot(dexp(seq(1, 10, .001)))
?dexp
x <- runs$size
y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = 0, b = 5.016516e-06)
model$coefficients
# Can we find a polynome that fit this function ?
model <- lm(y ~ x)
model$coefficients
abline(a = -1.994421e+00, b = 6.908190e-06)
abline(a = 0, b = 6.908190e-06)
abline(a = 1, b = 6.908190e-06)
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = 1, b = 6.908190e-06)
abline(a = 0, b = 6.908190e-06)
abline(a = -1, b = 6.908190e-06)
abline(a = -.5, b = 6.908190e-06)
x <- log(runs$size)
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
x <- (runs$size)^2
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
x <- log(runs$size)
x <- log(runs$size)
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + I(x^2))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
# Can we find a polynome that fit this function ?
model <- lm(y ~ I(x^2))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
# Can we find a polynome that fit this function ?
model <- lm(y ~ exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
lines(x[ix], myPredict[ix], col=2, lwd=2 )
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
x <- runs$size
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
x <- log(runs$size)
y <- runs$Elapsed
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
myPredict <- myPredict + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
lines(x[ix], myPredict[ix] + 2, col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) +2
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) + 1-
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) + 10
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) + 500
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
runs$Elapsed <- 60 * 24 * as.numeric(times(runs$Elapsed))
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
abline(a = -.5, b = 6.908190e-06)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
myPredict[ix]
model$coefficients
runs$size
log(runs$size)
model$coefficients
myPredict
x <- log(runs$size)
# y <- sapply(runs$MaxRSS, function(x) as.numeric(substr(x, 1, nchar(x)-1)))
y <- runs$Elapsed
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
y
runs$Elapsed
runs <- read.delim("~/Desktop/runs.csv")
View(runs)
x <- log(runs$size)
y <- 60 * 24 * as.numeric(times(runs$Elapsed))
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) -2
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
x <- log(runs$size)
y <- 60 * 24 * as.numeric(times(runs$Elapsed))
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) -1
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
library(chron)
head(runs)
x <- log(runs$size)
y <- 60 * 24 * as.numeric(times(runs$Elapsed))
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3)
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + exp(x))
# I can get the features of this model :
summary(model)
model$coefficients
summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) * .75
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )
?quap
library(rethinking)
?quap
exp(100000000)
exp(10000)
exp(-10000)
library(rethinking)
data(rugged)
d <-rugged
# makelogversionofoutcome
d$log_gdp <-log(d$rgdppc_2000)
# extractcountrieswithGDPdata
dd <-d[complete.cases(d$rgdppc_2000),]
# rescalevariables
dd$log_gdp_std <-dd$log_gdp/mean(dd$log_gdp)
dd$rugged_std <-dd$rugged/max(dd$rugged)
head(dd)
View(dd)
m8.1 <- quap(
alist(
log_gdp_std ~dnorm(mu,sigma),
mu <-a+b*(rugged_std-0.215),
a ~dnorm(1,1),
b ~dnorm(0,1),
sigma ~dexp(1)
) ,data=dd)
set.seed(7)
prior <-extract.prior(m8.1)
# setuptheplotdimensions
plot( NULL,xlim=c(0,1),ylim=c(0.5,1.5),
xlab="ruggedness" ,ylab="logGDP")
abline( h=min(dd$log_gdp_std),lty=2)
abline( h=max(dd$log_gdp_std),lty=2)
# draw50linesfromtheprior
rugged_seq <-seq(from=-0.1,to=1.1,length.out=30)
rugged_seq
mu <-link(m8.1,post=prior,data=data.frame(rugged_std=rugged_seq))
for (iin1:50)lines(rugged_seq,mu[i,],col=col.alpha("black",0.3))
for (i in 1:50)lines(rugged_seq,mu[i,],col=col.alpha("black",0.3))
??lines
help(lines)
# setuptheplotdimensions
plot( NULL,xlim=c(0,1),ylim=c(0.5,1.5),
xlab="ruggedness" ,ylab="logGDP")
abline( h=min(dd$log_gdp_std),lty=2)
abline( h=max(dd$log_gdp_std),lty=2)
# draw50linesfromtheprior
rugged_seq <-seq(from=-0.1,to=1.1,length.out=30)
mu <-link(m8.1,post=prior,data=data.frame(rugged_std=rugged_seq))
lines(rugged_seq,mu[1,],col=col.alpha("black",0.3))
lines(rugged_seq,mu[2,],col=col.alpha("black",0.3))
lines(rugged_seq,mu[5,],col=col.alpha("black",0.3))
rugged_seq
lines(rugged_seq,1,col=col.alpha("black",0.3))
help(link)
length(prior[[1]])
help(PSIS)
project_dir <- "~/repos/SBSL-modelling-and-analysis/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.3 Dataset Cross Comparison/artifacts/images")
setwd(working_dir)
source(paste0(project_dir, "r/utils/train-model.R"))
source(paste0(project_dir, "r/utils/ggplot_theme_publication.R"))
library(ggplot2)
library(reshape2)
library(RColorBrewer)
paired.cols <- brewer.pal(12,"Paired")
log.cols <- brewer.pal(8,"Accent")
gen_heatmap <- function(labels, g, cancer) {
m <- matrix("No data", nrow = length(g), ncol = length(g));
colnames(m) <- g
row.names(m) <- g
m[as.matrix(labels[1:2])] <- (labels$SL == "Y") * 1
m[as.matrix(labels[2:1])] <- (labels$SL == "Y") * 1
if (cancer == "OV") {
m <- m[order(m[1,]),]
}
melted <- melt(m)
p1 <- ggplot(melted, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
guides(fill = guide_legend(override.aes =
list(size = .5,
colour="grey"))) +
scale_fill_manual(values = c(paired.cols[c(6, 2)], "white"), labels = c("Negative", "Positive", "No Label")) +
ggtitle(cancer) +
theme_Publication() +
theme(aspect.ratio = 1,
legend.position = "right",
legend.direction = "vertical",
legend.title = element_blank(),
legend.text = element_text(size = 8),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.border = element_rect(colour = "gray", fill=NA, size=1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.y=element_blank())
p1
}
p <- list()
# for (cancer in c("BRCA", "LUAD", "OV", "COAD")) {
for (cancer in c("OV")) {
d <- train.get_dataset("combined", cancer)[c(1,2,4)]
genes <- union(d$gene1, d$gene2)
# genes <- genes[1:86]
# d <- d[(d$gene1 %in% genes) & (d$gene2 %in% genes),]
print(length(genes))
p[[cancer]] <- gen_heatmap(d, genes, cancer) +
theme(#legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title=element_blank(),
plot.margin=grid::unit(c(0,0,0,0), "mm"),
legend.text=element_text(size=11),
panel.border = element_rect(colour = "grey", fill=NA, size=1)) +
ggtitle("")
# ggsave(paste0(cancer, ".label-structure.pdf"), p[[cancer]], width = 12, height = 9, units = "cm")
}
p$OV$data
shape.data <- function(labels, g, cancer) {
m <- matrix("No data", nrow = length(g), ncol = length(g));
colnames(m) <- g
row.names(m) <- g
m[as.matrix(labels[1:2])] <- (labels$SL == "Y") * 1
m[as.matrix(labels[2:1])] <- (labels$SL == "Y") * 1
if (cancer == "OV") {
m <- m[order(m[1,]),]
}
return(m)
}
cancer <- "OV"
d <- train.get_dataset("combined", cancer)[c(1,2,4)]
genes <- union(d$gene1, d$gene2)
m <- shape.data(labels, genes, cancer)
shape.data <- function(labels, g, cancer) {
m <- matrix("No data", nrow = length(g), ncol = length(g));
colnames(m) <- g
row.names(m) <- g
m[as.matrix(labels[1:2])] <- (labels$SL == "Y") * 1
m[as.matrix(labels[2:1])] <- (labels$SL == "Y") * 1
if (cancer == "OV") {
m <- m[order(m[1,]),]
}
return(m)
}
cancer <- "OV"
d <- train.get_dataset("combined", cancer)[c(1,2,4)]
genes <- union(d$gene1, d$gene2)
m <- shape.data(d, genes, cancer)
m
View(m)
head(m)
m <- m[nrow(m):1,]
m["CSF1R"]
m["CSF1R", :]
m["CSF1R", ]
