vars <- colnames(train)[5:ncol(train)]
if (remove_dep_scores) {
vars <- vars[!grepl("(RNAi|CRISPR)", vars)]
}
f <- as.formula(paste("SL ~", paste(vars, collapse = " + ")))
f
}
"This function takes a list and returns the combined cancer datasets"
train.get_dataset <- function(dataset=NULL, cancers=NULL) {
all_data <- readRDS(paste0("~/repos/SBSL-modelling-and-analysis/r/data/", dataset, ".RData"))
all_data <- na.omit(all_data)
if (is.null(cancers)) {
return(all_data)
}
cancers <- intersect(cancers, unique(all_data$cancer_type))
all_data <- all_data[all_data$cancer_type %in% cancers, ]
if (any(all_data$SL == 1)) {
all_data$SL <- ifelse(all_data$SL == 1, "Y", "N")
}
all_data$SL <- as.factor(all_data$SL)
all_data
}
"This function returns the indices of pairs in d1 which also exist in d2"
train.duplicate_pairs <- function(d1, d2) {
common_pairs <- c()
for (i in 1:nrow(d1)) {
gene1 <- d1$gene1[i]
gene2 <- d1$gene2[i]
cancer <- d1$cancer_type[i]
common_1 <- which(d2$gene1 == gene1 & d2$gene2 == gene2 & d2$cancer_type == cancer)
common_2 <- which(d2$gene2 == gene1 & d2$gene1 == gene2 & d2$cancer_type == cancer)
if (length(common_1) > 0 | length(common_2) > 0) {
common_pairs <- c(common_pairs, i)
}
if (i%%100==0) print(paste(i, "of", nrow(d1)))
}
common_pairs
}
train.balance_cancers <- function(data, n = NULL) {
n <- ifelse(is.null(n), min(table(data$cancer_type, data$SL)), n)
l <- list()
for (cancer in unique(data$cancer_type)) {
l[[paste0(cancer, "1")]] <- dplyr::sample_n(data[data$cancer_type == cancer & (data$SL == 1 | data$SL == "Y"), ], n, replace = FALSE)
l[[paste0(cancer, "0")]] <- dplyr::sample_n(data[data$cancer_type == cancer & (data$SL == 0 | data$SL == "N"), ], n, replace = FALSE)
}
dplyr::bind_rows(l)
}
"This function creates a logistic regression model using the supplied formula using 10-fold cross validation"
train.logr <- function(train, f){
train.control <- trainControl(
method="repeatedcv",
number=10,
repeats=5,
classProbs=TRUE,
summaryFunction=twoClassSummary,
verboseIter = TRUE
)
train.grid <- expand.grid(alpha = seq(0, 1, length = 20), lambda = seq(0.0001, 1, length = 100))
m <- caret::train(f
, data = train
, method = "glmnet"
, metric = "ROC"
, trControl = train.control
, tuneGrid = train.grid)
return(m)
}
"This function creates a L0L2 model using the supplied formula using 10-fold cross validation"
train.l0l2 <- function(train, labels) {
X <- data.matrix(train)
y <- ifelse(labels == "Y", 1, -1)
cvfit <- L0Learn.cvfit(X, y,
nFolds=10,
loss="Logistic",
nGamma = 20,
nLambda = 100,
penalty="L0L2")
cvMeans <- unlist(lapply(cvfit$cvMeans, min))
optimalGammaIndex = which.min(cvMeans)
optimalLambdaIndex = which.min(cvfit$cvMeans[[optimalGammaIndex]])
cvfit$optimalLambda = cvfit$fit$lambda[[optimalGammaIndex]][optimalLambdaIndex]
cvfit$optimalGamma = cvfit$fit$gamma[optimalGammaIndex]
cvfit
}
"This function creates a random forest model using the supplied formula and 10-fold cross validation"
train.rf <- function(train, f){
train.control <- trainControl(
method="repeatedcv",
number=10,
repeats=5,
classProbs=TRUE,
summaryFunction=twoClassSummary,
verboseIter = TRUE
)
train.grid <- expand.grid(mtry = (3:12))
m <- caret::train(f
, data = train
, method = "rf"
, tuneLength = 10
, metric = train.get_metric()
, trControl = train.control
, tuneGrid = train.grid)
return(m)
}
train.MUVR <- function(train) {
library(MUVR)
nRep = 5
nOuter = 10
varRatio=0.8
method="RF"
m <- MUVR(X=train[5:ncol(train)],
Y=train$SL,
nRep = nRep,
nOuter=nOuter,
varRatio = varRatio,
method = method)
m
}
"This function creates a random forest model using the supplied formula and 10-fold cross validation"
train.gbm <- function(train, f){
# set up 10 fold cross validation
train.control <- trainControl(method = "cv", number = 10, repeats = 5,verbose = FALSE, search = "random", classProbs = TRUE, summary=twoClassSummary)
m <- train(f
, data = train
, method = "gbm"
, tuneLength = 10
, metric = train.get_metric()
, trControl = train.control)
return(m)
}
plot_prc_and_roc <- function(predicitons, test, posClass, negClass) {
class0.scores <- predicitons
class0.labels <- test$SL == posClass
roc <- roc.curve(scores.class0 = class1.scores, weights.class0 = class0.labels, curve = T)
prc <- pr.curve(scores.class0 = class1.scores, weights.class0 = class0.labels, curve = T)
return(list(roc, prc))
}
train.analyse <- function(pred, sdev, test, posLabel = "Y", negLabel = "N") {
curves <- plot_prc_and_roc(pred, test, posLabel, negLabel)
roc <- curves[[1]]
prc <- curves[[2]]
predictions <- data.frame(pred, sdev)
list(roc = roc, prc = prc, predictions=predictions, test=test$SL)
}
train.get_dataset("balanced")
d <- train.get_dataset("combined")
table(d$SL, d$cancer_type)
library(readxl)
ISLE <- read_excel("repos/SBSL-modelling-and-analysis/raw_data/labels/ISLE.xlsx",
skip = 1)
View(ISLE)
?coxph
library(survival)
?coxph
?coxph.object
project_dir <- "~/repos/SBSL-modelling-and-analysis/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.3 Dataset Cross Comparison/artifacts/images")
setwd(working_dir)
source(paste0(project_dir, "r/utils/logging.R"))
library(caret)
plots <- list()
for (dataset in c("discoversl", "isle")) {
data <- readRDS(paste0("../", dataset, "_run_data.Rdata"))
data$preds$DAISY <- NULL
data$preds$RRF <- data$preds$`Random Forest`
data$preds$`Random Forest` <- NULL
title <- ifelse(dataset == "isle", "ISLE/DiscoverSL (BRCA)", "DiscoverSL/ISLE (LUAD)")
V <- 10
plots[[dataset]] <- log.average_roc_curve_comparisons(data$preds, data$labels,
filename = dataset,
title = title)
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(plots$discoversl$rocp)
gg1 <- ggarrange(plots$isle$rocp + theme(legend.position="none"),
plots$discoversl$rocp + theme(legend.position="none", axis.title.y=element_blank(), axis.ticks.y=element_blank(), axis.text.y=element_blank()),
boxp + theme(legend.position="none"),
ncol = 3, nrow = 1, widths = c(1, 0.9, 1.1), common.legend = T, legend= "bottom")
plot(gg1)
ggsave("xdataset_brca.png", plots$isle$rocp, width = 6, height = 8, units = "cm")
ggsave("xdataset_luad.png", plots$discoversl$rocp, width = 6, height = 8, units = "cm")
ggsave("gene_dropout.png", boxp, width = 6, height = 8, units = "cm")
plots$isle$rocp
ggsave("xdataset_brca.png", plots$isle$rocp, width = 12, height = 16, units = "cm")
ggsave("xdataset_brca.png", plots$isle$rocp, width = 8, height = 10, units = "cm")
ggsave("xdataset_brca.png", plots$isle$rocp, width = 10, height = 11, units = "cm")
ggsave("xdataset_brca.png", plots$isle$rocp, width = 11, height = 11, units = "cm")
ggsave("xdataset_brca.png", plots$isle$rocp, width = 11, height = 11, units = "cm")
ggsave("xdataset_luad.png", plots$discoversl$rocp, width = 11, height = 11, units = "cm")
ggsave("gene_dropout.png", boxp, width = 11, height = 11, units = "cm")
project_dir <- "~/repos/SBSL-modelling-and-analysis/"
working_dir <- paste0(project_dir, "r/experiments/1.Performance/1.9 Gene Dropout/artifacts/images")
setwd(working_dir)
source(paste0(project_dir, "r/utils/logging.R"))
library(caret)
cancer <- "BRCA"
data <- readRDS(paste0("../", cancer, "_predictions_single.Rdata"))
title <- cancer
V <- length(data$preds[[1]])
models <- names(data$preds)
i_aucs <- i_prcs <- list()
for (nm in models) {
i_aucs[[nm]] <- unlist(foreach(i = 1:V) %do% {roc.curve(scores.class0 = data$preds[[nm]][[i]], weights.class0 = data$labels[[i]])$auc})
i_prcs[[nm]] <- unlist(foreach(i = 1:V) %do% {pr.curve(scores.class0 = data$preds[[nm]][[i]], weights.class0 = data$labels[[i]])$auc.integral})
}
ggdata_single <- data.frame(
AUC = unlist(i_aucs),
Dropout = "Single",
Model = unlist(lapply(models, function(x) rep(x, V))))
data <- readRDS(paste0("../", cancer, "_predictions_double.Rdata"))
i_aucs <- i_prcs <- list()
for (nm in models) {
i_aucs[[nm]] <- unlist(foreach(i = 1:V) %do% {roc.curve(scores.class0 = data$preds[[nm]][[i]], weights.class0 = data$labels[[i]])$auc})
i_prcs[[nm]] <- unlist(foreach(i = 1:V) %do% {pr.curve(scores.class0 = data$preds[[nm]][[i]], weights.class0 = data$labels[[i]])$auc.integral})
}
ggdata_double <- data.frame(
AUC = unlist(i_aucs),
Dropout = "Double",
Model = unlist(lapply(models, function(x) rep(x, V))))
data1 <- readRDS(paste0("../../../1.2 Per Cancer/artifacts/", cancer, "_single_predictions.Rdata"))
data2 <- readRDS(paste0("../../../1.2 Per Cancer/artifacts/", cancer, "_baselines_predictions.Rdata"))
preds <- c(data1$preds, data2$preds)
i_aucs <- i_prcs <- list()
for (nm in models) {
i_aucs[[nm]] <- unlist(foreach(i = 1:V) %do% {roc.curve(scores.class0 = preds[[nm]][[i]], weights.class0 = data1$labels[[i]])$auc})
i_prcs[[nm]] <- unlist(foreach(i = 1:V) %do% {pr.curve(scores.class0 = preds[[nm]][[i]], weights.class0 = data1$labels[[i]])$auc.integral})
}
ggdata_none <- data.frame(
AUC = unlist(i_aucs),
Dropout = "None",
Model = unlist(lapply(models, function(x) rep(x, V))))
ggdata <- dplyr::bind_rows(list(ggdata_single, ggdata_double, ggdata_none))
ggdata$Dropout <- factor(ggdata$Dropout, levels = c("None", "Single", "Double"))
boxp <- ggplot(ggdata, aes(x=Dropout, y=AUC, color=Model)) +
ylim(0,1) +
xlab("Dropout") +
geom_boxplot() +
ggtitle(paste0("AUC score for ", title)) +
scale_color_manual(values=log.cols) +
theme(
plot.title = element_text(size=8),
axis.title.x = element_text(size=8),
axis.title.y = element_text(size=8),
axis.text.x = element_text(size=8),
axis.text.y = element_text(size=8),
legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size=8)
) + guides(color=guide_legend(nrow=2,byrow=TRUE))
ggsave("gene_dropout.png", boxp, width = 11, height = 11, units = "cm")
library(readr)
library(readxl)
source("~/repos/SBSL-modelling-and-analysis/r/utils/load-labels.R")
source("~/repos/SBSL-modelling-and-analysis/r/utils/global-vars.R")
d2_tissue_types <- c("BREAST", "LUNG", "KIDNEY", "OVARY", "LARGE_INTESTINE", "MULTIPLE_MYELOMA")
avana_tissue_types <- c("BREAST", "LUNG", "KIDNEY", "OVARY", "COLORECTAL", "MULTIPLE_MYELOMA")
all_labels <- labels.load(labels_source)
# load cell line info
sample_info <- read_csv("~/repos/SBSL-modelling-and-analysis/raw_data/depmap/avana/sample_info.csv",
col_types = cols_only(`CCLE Name` = col_guess(),
DepMap_ID = col_guess(), lineage = col_guess()))
# avana dataset
avana <- read_csv("~/repos/SBSL-modelling-and-analysis/raw_data/depmap/avana/Achilles_gene_effect.csv")
avana_genes <- sapply(colnames(avana), function (x) strsplit(x, " \\(")[[1]][1])
avana_samples <- avana$X1
avana$X1 <- NULL
avana <- t(avana)
rownames(avana) <- avana_genes[-1]
colnames(avana) <- avana_samples
# d2 dependency scores
D2 <- read_csv("~/repos/SBSL-modelling-and-analysis/raw_data/depmap/combined_rnai/D2_combined_gene_dep_scores.csv")
d2_genes <- unname(sapply(D2$X1, function (x) strsplit(x, " \\(")[[1]][1]))
d2_samples <- unname(sapply(colnames(D2), function (x) sample_info[sample_info$`CCLE Name` == x, ]$DepMap_ID))
D2$X1 <- NULL
D2 <- as.matrix(D2)
rownames(D2) <- d2_genes
colnames(D2) <- d2_samples[-1]
head(D"")
head(D2)
head(sample_info)
breast_samples <- sample_info[sample_info$lineage == "breast"]
breast_samples <- sample_info[sample_info$lineage == "breast", ]
dim(breast_samples)
breast_samples <- breast_samples$DepMap_ID
dim(D2[, breast_samples])
D2[, breast_samples]
D2[, breast_samples[breast_samples %in% colnames(D2)]]
dim(D2[, breast_samples[breast_samples %in% colnames(D2)]])
"ESR1" %in% rownames(D2)
D2["ESR1", breast_samples[breast_samples %in% colnames(D2)]]
ESR1 <- D2["ESR1", breast_samples[breast_samples %in% colnames(D2)]]
barchart(ESR1[order[ESR1]])
barchart(ESR1[order(ESR1)])
rownames(D2)[1:20]
NAALAD2 <- D2["NAALAD2", breast_samples[breast_samples %in% colnames(D2)]]
barchart(NAALAD2[order(NAALAD2)])
KCNE3 <- D2["KCNE3", breast_samples[breast_samples %in% colnames(D2)]]
barchart(KCNE3[order(KCNE3)])
PDZK1P1 <- D2["PDZK1P1", breast_samples[breast_samples %in% colnames(D2)]]
barchart(PDZK1P1[order(PDZK1P1)])
barchart(ESR1[order(ESR1)])
barchart(PDZK1P1[order(PDZK1P1)])
barchart(ESR1[order(ESR1)])
C <- "BRCA"
library(RTCGAToolbox)
Sys.setenv(TAR = "/bin/tar")
library(readxl)
library(readr)
library(dplyr)
source("~/repos/SBSL-modelling-and-analysis/r/utils/load-labels.R")
source("~/repos/SBSL-modelling-and-analysis/r/utils/load-raw.R")
source("~/repos/SBSL-modelling-and-analysis/r/utils/global-vars.R")
all_labels <- labels.load(labels_source)
library(RTCGAToolbox)
Sys.setenv(TAR = "/bin/tar")
library(readxl)
library(readr)
library(dplyr)
source("~/repos/SBSL-modelling-and-analysis/r/utils/load-labels.R")
source("~/repos/SBSL-modelling-and-analysis/r/utils/load-raw.R")
source("~/repos/SBSL-modelling-and-analysis/r/utils/global-vars.R")
all_labels <- labels.load("isle")
labels <- dplyr::filter(all_labels, all_labels$cancer_type == C)
unique_genes <- as.matrix(labels[c("gene1", "gene2")])
unique_genes <- union(unique_genes[,1], unique_genes[,2])
rna <- raw.get_tcga_expression(C, unique_genes)
normal_samples <- substr(colnames(rna), 14, 15) == "11"
tumour_corr <- numeric(nrow(labels))
tumour_corr[1:5, 1:5]
dim(tumour_corr)
tumour_corr <- numeric(nrow(labels))
tumour_corr.pvalue <- numeric(nrow(labels))
normal_corr <- numeric(nrow(labels))
normal_corr.pvalue <- numeric(nrow(labels))
for (i in  1:nrow(labels)) {
t.corr <- tryCatch({
gene1_exp_tumour <- as.numeric(rna[labels[[i, "gene1"]], !normal_samples])
gene2_exp_tumour <- as.numeric(rna[labels[[i, "gene2"]], !normal_samples])
cor.test(gene1_exp_tumour, gene2_exp_tumour, method = "pearson")
}, error = function(e) {
c(estimate = 0, p.value = 1)
}, warning = function(e) {
c(estimate = 0, p.value = 1)
})
n.corr <- tryCatch({
gene1_exp_normal <- as.numeric(rna[labels[[i, "gene1"]], normal_samples])
gene2_exp_normal <- as.numeric(rna[labels[[i, "gene2"]], normal_samples])
cor.test(gene1_exp_normal, gene2_exp_normal, method = "pearson")
}, error = function(e) {
c(estimate = 0, p.value = 1)
}, warning = function(e) {
c(estimate = 0, p.value = 1)
})
tumour_corr[i] <- t.corr[["estimate"]]
tumour_corr.pvalue[i] <- t.corr[["p.value"]]
normal_corr[i] <- n.corr[["estimate"]]
normal_corr.pvalue[i] <- n.corr[["p.value"]]
if (i%%100 == 0) print(paste("completed", i, "of", nrow(labels)))
}
dim(tumour_corr)
t.corr
tumour_corr
max(tumour_corr)
labels
as.numeric(rna[labels[[i, "gene1"]], !normal_samples])
rna
rownames(rna)
labels[[i, "gene1"]
]
rna[labels[[i, "gene1"]], ]
normal_samples <- substr(colnames(rna), 14, 15) == "11"
rna[labels[[i, "gene1"]], !normal_samples]
normal_samples
rna[labels[[i, "gene1"]], !normal_samples]
rna[labels[[i, "gene1"]],]
rna[labels[[i, "gene1"]], normal_samples]
normal_samples
length(normal_samples)
dim(rna)
type(rna)
astype(rna)
class(rna)
!normal_samples
rna[labels[[i, "gene1"]], !normal_samples]
rna[1, !normal_samples]
rna[1, !normal_samples]
rna[labels[[i, "gene1"]], ]
library(discover)
library(survival)
library(survminer)
library(doParallel)
library(foreach)
library(plyr)
library(dplyr)
library(data.table)
library(edgeR)
library(readxl)
source("~/repos/SBSL-modelling-and-analysis/r/utils/load-labels.R")
generate_gene_expression_correlations("BRCA1", "PARP1", "BRCA")
# Generate Gene Expression Correlation in TCGA Patient Tumours
# Data pulled from RTCGAToolbox::getFirehoseRunningDates(1)
#
# @param gene1 The query gene
# @param cancer The cancer of interest
# @return Dataframe with all calculated predictors
#
# @example generate_gene_expression_correlations("POLQ", genes, "BRCA")
generate_gene_expression_correlations <- function(gene1, genes, cancer) {
print(paste0("generating gene expression correlations for ", gene1, " in ", cancer))
mRNA <- readRDS(paste0("~/repos/SBSL-modelling-and-analysis/r/data/datasets/tcga_expression_", cancer, ".RData"))
mRNA <- as.data.frame(mRNA)
normal_samples <- substr(colnames(mRNA), 14, 15) == "11"
tumour_corr <- numeric(length(genes))
tumour_corr.pvalue <- numeric(length(genes)) + 1
normal_corr <- numeric(length(genes))
normal_corr.pvalue <- numeric(length(genes)) + 1
names(tumour_corr) <- names(tumour_corr.pvalue) <- names(normal_corr) <- names(normal_corr.pvalue) <- genes
i <- 0
pb <- txtProgressBar(min = i, max = length(genes), style = 3)
for (gene2 in genes) {
tumour_valuesA <- as.numeric(mRNA[gene1, !normal_samples])
tumour_valuesB <- as.numeric(mRNA[gene2, !normal_samples])
if(!all(is.na(tumour_valuesA)) & !all(is.na(tumour_valuesB))) {
t.corr <- cor.test(tumour_valuesA, tumour_valuesB, method = "pearson")
tumour_corr[gene2] <- t.corr[["estimate"]]
tumour_corr.pvalue[gene2] <- t.corr[["p.value"]]
}
norm_valuesA <- as.numeric(mRNA[gene1, normal_samples])
norm_valuesB <- as.numeric(mRNA[gene2, normal_samples])
if(!all(is.na(norm_valuesA)) & !all(is.na(norm_valuesB))) {
n.corr <- cor.test(norm_valuesA, norm_valuesB, method = "pearson")
normal_corr[gene2] <- n.corr[["estimate"]]
normal_corr.pvalue[gene2] <- n.corr[["p.value"]]
}
setTxtProgressBar(pb, i)
i <- i + 1
}
data.frame(gene1,
gene2 = genes,
tumour_corr,
tumour_corr.pvalue,
normal_corr,
normal_corr.pvalue)
}
generate_gene_expression_correlations("BRCA1", "PARP1", "BRCA")
generate_gene_expression_correlations("BRCA2", "PARP1", "BRCA")
pairs <- labels.load(dataset)
dataset <- "combined"
pairs <- labels.load(dataset)
pairs <- labels.load(dataset)
labels.load("isle")
pairs <- labels.load("discoversl")
pairs <- labels.load("discoversl", FALSE)
View(labels.load)
labels <- read_delim("~/repos/SBSL-modelling-and-analysis/raw_data/labels/DiscoverSL_trainingSet.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
labels <- dplyr::rename(labels, cancer_type = Cancer, gene1 = Gene1, gene2 = Gene2, SL = Class)
labels$SL <- sapply(labels$SL, function(x) ifelse(x == "positive", 1, 0))
colnames(labels)
labels.load <- function(dataset, all_data = FALSE) {
if (dataset == "isle") {
labels <- read_excel("~/repos/SBSL-modelling-and-analysis/raw_data/labels/ISLE.xlsx", skip = 2)
labels <- dplyr::rename(labels, cancer_type = `cancer type tested`)
labels <- labels[!(labels$`gene1 perturbation` == "mut" | labels$`gene2 perturbation` == "mut"), ]
}
if (dataset == "discoversl") {
labels <- read_delim("~/repos/SBSL-modelling-and-analysis/raw_data/labels/DiscoverSL_trainingSet.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
labels <- dplyr::rename(labels, cancer_type = Cancer, gene1 = Gene1, gene2 = Gene2, SL = Class)
labels$SL <- sapply(labels$SL, function(x) ifelse(x == "positive", 1, 0))
}
if (all_data) {
return(labels)
} else {
return(labels[, c("gene1", "gene2", "cancer_type", "SL")])
}
}
pairs <- labels.load("discoversl")
head(pairs)
cancer_list <- "BRCA"
pairs <- labels.load(dataset)
pairs <- pairs[pairs$cancer_type %in% cancer_list, ]
# pairs <- readRDS("~/repos/SBSL-modelling-and-analysis/r/data/isle_new_LAML.Rdata")[1:4]
gene1s <- unique(unlist(pairs$gene1))
gene1 <- "BRCA1"
d <- pairs[pairs$gene1 == gene1, ]
cancer <- "BRCA"
d_ <- d[d$cancer_type == cancer, ]
non_dups <- which(!duplicated(d_$gene2))
genes <- d_$gene2[non_dups]
genes
generate_gene_expression_correlations(gene1, genes, "BRCA")
s <- generate_gene_expression_correlations(gene1, genes, "BRCA")
max(s$tumour_corr)
s[s$tumour_corr == max(s$tumour_corr), ]
mRNA <- readRDS(paste0("~/repos/SBSL-modelling-and-analysis/r/data/datasets/tcga_expression_", cancer, ".RData"))
mRNA <- as.data.frame(mRNA)
normal_samples <- substr(colnames(mRNA), 14, 15) == "11"
BRCA1 <- as.numeric(mRNA["BRCA1", !normal_samples])
ECT2 <- as.numeric(mRNA["ECT2", !normal_samples])
BRCA1
ECT2
plot(BRCA1, ECT2)
expression <- data.frame(BRCA1, ECT2)
p <- ggplot(expression, aes(BRCA1, ECT2))
p + geom_point()
p + geom_smooth(method=lm)
p + geom_smooth(method=lm) + geom_point()
p + geom_smooth(method=lm, se=FALSE) + geom_point()
